#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .;
	else
		subl "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules' --dirsfirst "$@" | less -FRNX;
}

# https://unix.stackexchange.com/questions/97920/how-to-cd-automatically-after-git-clone
# git()
# {
#    local tmp=$(mktemp)
#    local repo_name

#    if [ "$1" = clone ] ; then
#      /usr/bin/git "$@" | tee $tmp
#      repo_name=$(awk -F\' '/Cloning into/ {print $2}' $tmp)
#      rm $tmp
#      printf "changing to directory %s\n" "$repo_name"
#      cd "$repo_name"
#    else
#      /usr/bin/git "$@"
#    fi
# }

function gclone() {
  DIR="$(basename "$1")";
  if [[ -n $2 ]]; then
    DIR="$2";
  fi;
  
  git clone "$@" && cd "$DIR"
}

function grmtag() {
	git tag -d "$1"
	git push origin ":refs/tags/$1"
}